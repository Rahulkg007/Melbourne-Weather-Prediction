plot(x)
x = 1:5
plot(x)
install.packages('tidyverse')
require(ggplot2)
ggplot2::diamonds
ggplot(aes(depth,price)) + geom_point()
ggplot(aes(depth,price)) + geom_bar()
mtcars$mpg
mtcars
ggplot(aes(mtcars$mpg)) + geom_bar()
ggplot(aes(mtcars$mpg,0)) + geom_bar()
ggplot2::diamonds
ggplot(diamonds,aes(color, clarity)) + geom_bar()
ggplot(diamonds,aes(color, clarity)) + geom_bar(stat='identity')
ggplot(diamonds,aes(depth, price)) + geom_point()
# Approach 2:
library(reshape2)
df <- melt(economics[, c("date", "pce", "unemploy")], id="date")
ggplot(df) + geom_line(aes(x=date, y=value, color=variable)) + labs(title="Economics")# plot multiple time series by melting
plot1 <- ggplot(mtcars, aes(x=cyl)) + geom_bar() + labs(title="Frequency bar chart")  # Y axis derived from counts of X item
print(plot1)
df
mtcars
install.packages('mlr')
# Annual precipitation (in inches) in Los Angeles, 1878-1992
# Annual precipitation (in inches) in Los Angeles, 1878-1992
# Annual precipitation (in inches) in Los Angeles, 1878-1992
# Import Libraries
require(TSA)
data(rwalk)
model1 = lm(rwalk~time(rwalk)) # label the model as model1
summary(model1)
plot(rwalk,type='o',ylab='y',, main = "Time series plot for simulated random walk series")
abline(model1) # add the fitted least squares line from model1
# Quadratic time trend
t = time(rwalk)
t2 = t^2
model1.1 = lm(rwalk~t+t2) # label the model as model1
summary(model1.1)
plot(ts(fitted(model1.1)),
ylim = c(min(c(fitted(model1.1),as.vector(rwalk))), max(c(fitted(model1.1),as.vector(rwalk)))),ylab='y' ,
main = "Fitted quadratic curve to random walk data")
plot(ts(fitted(model1.1)),
ylim = c(min(c(fitted(model1.1),as.vector(rwalk))), max(c(fitted(model1.1),as.vector(rwalk)))),ylab='y' ,
main = "Fitted quadratic curve to random walk data")
plot(ts(fitted(model1.1)),
ylim = c(min(c(fitted(model1.1),as.vector(rwalk))), max(c(fitted(model1.1),as.vector(rwalk)))),ylab='y' ,
main = "Fitted quadratic curve to random walk data")
# Quadratic time trend
t = time(rwalk)
t2 = t^2
model1.1 = lm(rwalk~t+t2) # label the model as model1
summary(model1.1)
plot(ts(fitted(model1.1)),
ylim = c(min(c(fitted(model1.1),as.vector(rwalk))), max(c(fitted(model1.1),as.vector(rwalk)))),ylab='y' ,
main = "Fitted quadratic curve to random walk data")
lines(as.vector(rwalk),type="o")
rwalk
?rwalk
time(rwalk)
# Quadratic time trend
t = time(rwalk)
t2 = t^2
t2
model1.1
summary(model1.1)
View(model1.1)
fitted(model1.1)
View(model1)
View(model1.1)
model1.1$fitted.values
ts(model1.1$fitted.values)
plot(ts(model1.1$fitted.values),
ylim = c(min(c(fitted(model1.1),as.vector(rwalk))), max(c(fitted(model1.1),as.vector(rwalk)))),ylab='y' ,
main = "Fitted quadratic curve to random walk data")
lines(as.vector(rwalk),type="o")
plot(ts(fitted(model1.1)),
#ylim = c(min(c(fitted(model1.1),as.vector(rwalk))), max(c(fitted(model1.1),as.vector(rwalk)))),
ylab='y' ,
main = "Fitted quadratic curve to random walk data")
lines(as.vector(rwalk),type="o")
plot(ts(fitted(model1.1)),
ylim = c(min(c(fitted(model1.1),as.vector(rwalk))), max(c(fitted(model1.1),as.vector(rwalk)))),
ylab='y' ,
main = "Fitted quadratic curve to random walk data")
as.vector(rwalk)
fitted(model1.1)
min(c(fitted(model1.1),as.vector(rwalk)))
max(c(fitted(model1.1),as.vector(rwalk)))
plot(ts(fitted(model1.1)),
ylim = c(min(c(fitted(model1.1),as.vector(rwalk))), max(c(fitted(model1.1),as.vector(rwalk)))),
ylab='y' ,
main = "Fitted quadratic curve to random walk data")
lines(as.vector(rwalk),type="o")
# Cyclic Trend
data(tempdub)
month.=season(tempdub) # period added to improve table display and this line sets up indicators
model2=lm(tempdub~month.-1) # -1 removes the intercept term
summary(model2)
model3=lm(tempdub~month.) # remove -1 to include the intercept termin the model
summary(model3)
# Cyclic Trend
data(tempdub)
month.=season(tempdub) # period added to improve table display and this line sets up indicators
model2=lm(tempdub~month.-1) # -1 removes the intercept term
summary(model2)
season(tempdub)
month.
month.-1
model2=lm(tempdub~month.-1) # -1 removes the intercept term
summary(model2)
model3=lm(tempdub~month.) # remove -1 to include the intercept termin the model
summary(model3)
# Cosine Trends
har.=harmonic(tempdub,1) # calculate cos(2*pi*t) and sin(2*pi*t)
model4=lm(tempdub~har.)
summary(model4)
plot(ts(fitted(model4),freq=12,start=c(1964,1)),
ylab='Temperature',type='l',
ylim=range(c(fitted(model4),tempdub)),
main="Fitted model to average monthly temperature series")
# ylim ensures that the y axis range fits the raw data and the fitted values
points(tempdub)
#Residual Analysis
plot(y=rstudent(model3),
x=as.vector(time(tempdub)),
xlab='Time',
ylab='Standardized Residuals',type='o',
main = "Time series plot of residuals")
rstudent(model3)
View(model3)
#Residual Analysis
plot(y=model3$residuals,
x=as.vector(time(tempdub)),
xlab='Time',
ylab='Standardized Residuals',type='o',
main = "Time series plot of residuals")
#Residual Analysis
plot(y=rstudent(model3),
x=as.vector(time(tempdub)),
xlab='Time',
ylab='Standardized Residuals',type='o',
main = "Time series plot of residuals")
points(y=rstudent(model3),x=as.vector(time(tempdub)), pch=as.vector(season(tempdub)))
plot(y=rstudent(model3),
x=as.vector(time(tempdub)),
xlab='Time',
ylab='Standardized Residuals',
main = "Time series plot of residuals")
points(y=rstudent(model3),x=as.vector(time(tempdub)), pch=as.vector(season(tempdub)))
plot(y=rstudent(model3),
x=as.vector(time(tempdub)),
xlab='Time',
ylab='Standardized Residuals',
type='l'
main = "Time series plot of residuals")
plot(y=rstudent(model3),
x=as.vector(time(tempdub)),
xlab='Time',
ylab='Standardized Residuals',
type='l',
main = "Time series plot of residuals")
points(y=rstudent(model3),x=as.vector(time(tempdub)), pch=as.vector(season(tempdub)))
plot(y=rstudent(model3),x=as.vector(fitted(model3)),
xlab='Fitted Trend Values',
ylab='Standardized Residuals',
type='n',
main = "Time series plot of standardised residuals")
points(y=rstudent(model3),x=as.vector(fitted(model3)),pch=as.vector(season(tempdub)))
hist(rstudent(model3),xlab='Standardized Residuals')
hist(model3$residuals,xlab='Standardized Residuals')
hist(model3$df.residuals,xlab='Standardized Residuals')
hist(model3$df.residual,xlab='Standardized Residuals')
hist(model3$residuals,xlab='Standardized Residuals')
hist(rstudent(model3),xlab='Standardized Residuals')
qqline(y, col = 2, lwd = 1, lty = 2)
y = rstudent(model3)
qqnorm(y)
qqline(y, col = 2, lwd = 1, lty = 2)
y = rstudent(model3)
qqnorm(y)
qqline(y, col = 2, lwd = 1, lty = 2)
y = rstudent(model3)
shapiro.test(y)
acf(rstudent(model3), main = "ACF of standardized residuals")
plot(y=rstudent(model1),x=as.vector(time(rwalk)),
ylab='Standardized Residuals',xlab='Time',type='o',
main = "Time series plot of the standardized residuals")
plot(y=rstudent(model1),x=fitted(model1),
ylab='Standardized Residuals',xlab='Fitted Trend Line Values',
type='p', main = "Time series plot of the standardized residuals")
acf(rstudent(model1), main = "ACF of the standardized residuals")
data(larain)
y = larain
qqnorm(y)
qqline(y, col = 2, lwd = 1, lty = 2)
library(TSA)
n=100
sim.data1 = arima.sim(list(order = c(1,0,0), ar = 0.6), n = n)
acf(sim.data1)
pacf(sim.data1)
sim.data2 = arima.sim(list(order = c(1,0,0), ar = -0.6), n = n)
acf(sim.data2)
pacf(sim.data2)
sim.data3 = arima.sim(list(order = c(0,0,1), ma = 0.95), n = n)
acf(sim.data3)
acf(sim.data2)
sim.data4 = arima.sim(list(order = c(0,0,1), ma = -0.5), n = n)
acf(sim.data4)
sim.data8 = arima.sim(list(order = c(1,0,1), ar = -0.6, ma = -0.5), n = n)
acf(sim.data8)
sim.data8 = arima.sim(list(order = c(1,0,1), ar = -0.6, ma = -0.5), n = n)
acf(sim.data8)
sim.data5 = arima.sim(list(order = c(1,0,1), ar = 0.6, ma = 0.5), n = n)
acf(sim.data5)
melt(Melbourne[,c('Cloud9am','Cloud3pm')]) %>%
ggplot(aes(value)) +
geom_bar() +
facet_wrap(~variable,scales="free") +
coord_flip()
# 1. Packages  ----
library(knitr)
library(mlr)
library(tidyverse)
library(GGally)
library(cowplot)
require(corrplot)
library(reshape2)
theme_weather <- theme_minimal() +
theme(plot.subtitle = element_text(color = '#333333', face = "italic"),
plot.caption = element_text(color = '#666666', face = "italic", size = 9))
# -------------------------------
# Data Preprocessing and cleaning
# -------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
weather <- read.csv('weatherAUS 2.csv')
weather$Date = as.Date(weather$Date,'%Y-%m-%d')
# Filter data for Melbourne
Melbourne = weather[weather$Location %in% c('Melbourne','MelbourneAirport'),]
# Add Month and Year-Month
Melbourne$Month = strftime(Melbourne$Date,"%b")
Melbourne$MonthYear = strftime(Melbourne$Date,"%b-%Y")
# Missing Year Data
missing_year = subset(Melbourne ,is.na(Melbourne$RainToday) | is.na(Melbourne$RainTomorrow))
missing_year$Year = strftime(missing_year$Date,"%Y")
ggplot(missing_year,aes(Year)) +
geom_bar(fill='#969696') +
ggtitle('Melbourne Weather Missing Data by Year') +
labs(subtitle = '2015 has most number of Missing Data',
caption="Source - Commonwealth of Australia , Bureau of Meteorology") +
theme_weather
# Missing Month Data
missing_month = subset(Melbourne ,is.na(RainToday) | is.na(RainTomorrow))
missing_month$Month = factor(missing_month$Month,
levels = c('Jan','Feb','Mar','Apr','May','Jun',
'Jul','Aug','Sep','Oct','Nov','Dec'),
ordered = TRUE)
ggplot(missing_month,aes(Month)) +
geom_bar(fill='#969696') +
ggtitle('Melbourne Weather Missing Data by Month') +
labs(subtitle = 'Apr has highest missing values, Dec has least',
caption="Source - Commonwealth of Australia , Bureau of Meteorology") +
theme_weather
# Since the month data is distributed well, we can remove them from data set
# Missing data percentage
missing_percentage = count(missing_month)/count(Melbourne) * 100
missing_percentage
# Remove data where Today and Tomorrow rain information is missing
# 14.4% data is missing
# Remove Missing Data
Melbourne = Melbourne %>%
drop_na(RainToday) %>%
drop_na(RainTomorrow)
# Showing
str(Melbourne)
summarizeColumns(Melbourne) %>% knitr::kable( caption = 'Feature Summary before Data Preprocessing')
melt(Melbourne[,c('Cloud9am','Cloud3pm')]) %>%
ggplot(aes(value)) +
geom_bar() +
facet_wrap(~variable,scales="free") +
coord_flip()
theme_weather <- theme_minimal() +
theme(plot.subtitle = element_text(color = '#333333', face = "italic"),
plot.caption = element_text(color = '#666666', face = "italic", size = 9))
theme_set(theme_minimal())
theme_weather <- theme_minimal() +
theme(plot.subtitle = element_text(color = '#333333', face = "italic"),
plot.caption = element_text(color = '#666666', face = "italic", size = 9))
melt(Melbourne[,c('Cloud9am','Cloud3pm')]) %>%
ggplot(aes(value)) +
geom_bar() +
facet_wrap(~variable,scales="free") +
coord_flip()
x = Melbourne
x$deltaCloud = x$Cloud9am - x$Cloud3pm
ggplot(x,aes(deltaCloud)) + geom_bar()
ggplot(x,aes(sign(deltaCloud))) + geom_bar()
ggplot(x,aes(sign(deltaCloud) * deltaCloud)) + geom_bar()
ggplot(x,aes(deltaCloud)) + geom_bar() + scale_y_continuous(labels=abs)
x$dir <- ifelse(x$deltaCloud < 0, -1, 1)
ggplot(x,aes(deltaCloud*dir)) + geom_bar() + scale_y_continuous(labels=abs)
ggplot(x,aes(deltaCloud*dir)) + geom_bar()
x$deltaCloud
ggplot(x,aes(deltaCloud)) + geom_bar()+ coord_flip()
barplot(x$deltaCloud)
y = x %>%
group_by(deltaCloud) %>%
summarise(count=n())
y
ggplot(y,aes(deltaCloud,count)) + geom_bar(stat = 'identity')
ggplot(y,aes(deltaCloud,count)) + geom_bar(stat = 'identity',position="identity")
ggplot(y,aes(x=deltaCloud,y=count)) + geom_bar(stat = 'identity',position="identity")
ggplot(y,aes(deltaCloud)) + geom_bar(stat = 'identity')
x = Melbourne
x$deltaCloud = x$Cloud9am - x$Cloud3pm
ggplot(y,aes(deltaCloud)) + geom_bar(stat = 'identity')
ggplot(y,aes(deltaCloud)) + geom_bar()
x = Melbourne
x$deltaCloud = x$Cloud9am - x$Cloud3pm
ggplot(y,aes(deltaCloud)) + geom_bar()
ggplot(x,aes(deltaCloud)) + geom_bar()
ggplot(x,aes(deltaCloud, fill=RainToday)) + geom_bar()
ggplot(x,aes(deltaCloud, fill=RainToday)) + geom_bar(position = 'dodge')
ggplot(delta_cloud, aes(deltaCloud, fill=RainToday)) +
geom_bar(position = 'dodge') +
ggtitle('Melbourne Weather - Cloud Delta Change in Oktas') +
xlab('Oktas') +
ylab('') +
labs(subtitle = '0 is sky completely clear and 8 is sky completely overcast ',
caption="Source - Commonwealth of Australia , Bureau of Meteorology") +
theme_weather
delta_cloud = Melbourne
delta_cloud$deltaCloud = x$Cloud9am - x$Cloud3pm
ggplot(delta_cloud, aes(deltaCloud, fill=RainToday)) +
geom_bar(position = 'dodge') +
ggtitle('Melbourne Weather - Cloud Delta Change in Oktas') +
xlab('Oktas') +
ylab('') +
labs(subtitle = '0 is sky completely clear and 8 is sky completely overcast ',
caption="Source - Commonwealth of Australia , Bureau of Meteorology") +
theme_weather
ggplot(delta_cloud, aes(deltaCloud, fill=RainToday)) +
geom_bar(position = 'dodge') +
ggtitle('Melbourne Weather - Cloud Delta Change in Oktas') +
xlab('Oktas') +
ylab('') +
labs(subtitle = '0 is completely clear sky and 8 is completely overcast ',
caption="Source - Commonwealth of Australia , Bureau of Meteorology") +
theme_weather
ggplot(delta_cloud, aes(deltaCloud, fill=RainToday)) +
geom_bar(position = 'dodge') +
ggtitle('Melbourne Weather - Cloud Delta Change in Oktas') +
xlab('Oktas') +
ylab('') +
labs(subtitle = '0 is completely clear sky and 8 is completely overcast',
caption="Source - Commonwealth of Australia , Bureau of Meteorology") +
theme_weather
ggplot(delta_cloud, aes(deltaCloud, fill=RainToday)) +
geom_bar(position = 'dodge') +
ggtitle('Melbourne Weather - Cloud Delta Change in Oktas') +
xlab('Oktas') +
ylab('') +
labs(subtitle = '0 is completely clear sky and 8 is completely overcast',
caption="Source - Commonwealth of Australia , Bureau of Meteorology") +
theme_weather
