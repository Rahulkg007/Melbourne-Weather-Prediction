plot(x)
x = 1:5
plot(x)
install.packages('tidyverse')
require(ggplot2)
ggplot2::diamonds
ggplot(aes(depth,price)) + geom_point()
ggplot(aes(depth,price)) + geom_bar()
mtcars$mpg
mtcars
ggplot(aes(mtcars$mpg)) + geom_bar()
ggplot(aes(mtcars$mpg,0)) + geom_bar()
ggplot2::diamonds
ggplot(diamonds,aes(color, clarity)) + geom_bar()
ggplot(diamonds,aes(color, clarity)) + geom_bar(stat='identity')
ggplot(diamonds,aes(depth, price)) + geom_point()
# Approach 2:
library(reshape2)
df <- melt(economics[, c("date", "pce", "unemploy")], id="date")
ggplot(df) + geom_line(aes(x=date, y=value, color=variable)) + labs(title="Economics")# plot multiple time series by melting
plot1 <- ggplot(mtcars, aes(x=cyl)) + geom_bar() + labs(title="Frequency bar chart")  # Y axis derived from counts of X item
print(plot1)
df
mtcars
install.packages('mlr')
# Annual precipitation (in inches) in Los Angeles, 1878-1992
# Annual precipitation (in inches) in Los Angeles, 1878-1992
# Annual precipitation (in inches) in Los Angeles, 1878-1992
# Import Libraries
require(TSA)
data(rwalk)
model1 = lm(rwalk~time(rwalk)) # label the model as model1
summary(model1)
plot(rwalk,type='o',ylab='y',, main = "Time series plot for simulated random walk series")
abline(model1) # add the fitted least squares line from model1
# Quadratic time trend
t = time(rwalk)
t2 = t^2
model1.1 = lm(rwalk~t+t2) # label the model as model1
summary(model1.1)
plot(ts(fitted(model1.1)),
ylim = c(min(c(fitted(model1.1),as.vector(rwalk))), max(c(fitted(model1.1),as.vector(rwalk)))),ylab='y' ,
main = "Fitted quadratic curve to random walk data")
plot(ts(fitted(model1.1)),
ylim = c(min(c(fitted(model1.1),as.vector(rwalk))), max(c(fitted(model1.1),as.vector(rwalk)))),ylab='y' ,
main = "Fitted quadratic curve to random walk data")
plot(ts(fitted(model1.1)),
ylim = c(min(c(fitted(model1.1),as.vector(rwalk))), max(c(fitted(model1.1),as.vector(rwalk)))),ylab='y' ,
main = "Fitted quadratic curve to random walk data")
# Quadratic time trend
t = time(rwalk)
t2 = t^2
model1.1 = lm(rwalk~t+t2) # label the model as model1
summary(model1.1)
plot(ts(fitted(model1.1)),
ylim = c(min(c(fitted(model1.1),as.vector(rwalk))), max(c(fitted(model1.1),as.vector(rwalk)))),ylab='y' ,
main = "Fitted quadratic curve to random walk data")
lines(as.vector(rwalk),type="o")
rwalk
?rwalk
time(rwalk)
# Quadratic time trend
t = time(rwalk)
t2 = t^2
t2
model1.1
summary(model1.1)
View(model1.1)
fitted(model1.1)
View(model1)
View(model1.1)
model1.1$fitted.values
ts(model1.1$fitted.values)
plot(ts(model1.1$fitted.values),
ylim = c(min(c(fitted(model1.1),as.vector(rwalk))), max(c(fitted(model1.1),as.vector(rwalk)))),ylab='y' ,
main = "Fitted quadratic curve to random walk data")
lines(as.vector(rwalk),type="o")
plot(ts(fitted(model1.1)),
#ylim = c(min(c(fitted(model1.1),as.vector(rwalk))), max(c(fitted(model1.1),as.vector(rwalk)))),
ylab='y' ,
main = "Fitted quadratic curve to random walk data")
lines(as.vector(rwalk),type="o")
plot(ts(fitted(model1.1)),
ylim = c(min(c(fitted(model1.1),as.vector(rwalk))), max(c(fitted(model1.1),as.vector(rwalk)))),
ylab='y' ,
main = "Fitted quadratic curve to random walk data")
as.vector(rwalk)
fitted(model1.1)
min(c(fitted(model1.1),as.vector(rwalk)))
max(c(fitted(model1.1),as.vector(rwalk)))
plot(ts(fitted(model1.1)),
ylim = c(min(c(fitted(model1.1),as.vector(rwalk))), max(c(fitted(model1.1),as.vector(rwalk)))),
ylab='y' ,
main = "Fitted quadratic curve to random walk data")
lines(as.vector(rwalk),type="o")
# Cyclic Trend
data(tempdub)
month.=season(tempdub) # period added to improve table display and this line sets up indicators
model2=lm(tempdub~month.-1) # -1 removes the intercept term
summary(model2)
model3=lm(tempdub~month.) # remove -1 to include the intercept termin the model
summary(model3)
# Cyclic Trend
data(tempdub)
month.=season(tempdub) # period added to improve table display and this line sets up indicators
model2=lm(tempdub~month.-1) # -1 removes the intercept term
summary(model2)
season(tempdub)
month.
month.-1
model2=lm(tempdub~month.-1) # -1 removes the intercept term
summary(model2)
model3=lm(tempdub~month.) # remove -1 to include the intercept termin the model
summary(model3)
# Cosine Trends
har.=harmonic(tempdub,1) # calculate cos(2*pi*t) and sin(2*pi*t)
model4=lm(tempdub~har.)
summary(model4)
plot(ts(fitted(model4),freq=12,start=c(1964,1)),
ylab='Temperature',type='l',
ylim=range(c(fitted(model4),tempdub)),
main="Fitted model to average monthly temperature series")
# ylim ensures that the y axis range fits the raw data and the fitted values
points(tempdub)
#Residual Analysis
plot(y=rstudent(model3),
x=as.vector(time(tempdub)),
xlab='Time',
ylab='Standardized Residuals',type='o',
main = "Time series plot of residuals")
rstudent(model3)
View(model3)
#Residual Analysis
plot(y=model3$residuals,
x=as.vector(time(tempdub)),
xlab='Time',
ylab='Standardized Residuals',type='o',
main = "Time series plot of residuals")
#Residual Analysis
plot(y=rstudent(model3),
x=as.vector(time(tempdub)),
xlab='Time',
ylab='Standardized Residuals',type='o',
main = "Time series plot of residuals")
points(y=rstudent(model3),x=as.vector(time(tempdub)), pch=as.vector(season(tempdub)))
plot(y=rstudent(model3),
x=as.vector(time(tempdub)),
xlab='Time',
ylab='Standardized Residuals',
main = "Time series plot of residuals")
points(y=rstudent(model3),x=as.vector(time(tempdub)), pch=as.vector(season(tempdub)))
plot(y=rstudent(model3),
x=as.vector(time(tempdub)),
xlab='Time',
ylab='Standardized Residuals',
type='l'
main = "Time series plot of residuals")
plot(y=rstudent(model3),
x=as.vector(time(tempdub)),
xlab='Time',
ylab='Standardized Residuals',
type='l',
main = "Time series plot of residuals")
points(y=rstudent(model3),x=as.vector(time(tempdub)), pch=as.vector(season(tempdub)))
plot(y=rstudent(model3),x=as.vector(fitted(model3)),
xlab='Fitted Trend Values',
ylab='Standardized Residuals',
type='n',
main = "Time series plot of standardised residuals")
points(y=rstudent(model3),x=as.vector(fitted(model3)),pch=as.vector(season(tempdub)))
hist(rstudent(model3),xlab='Standardized Residuals')
hist(model3$residuals,xlab='Standardized Residuals')
hist(model3$df.residuals,xlab='Standardized Residuals')
hist(model3$df.residual,xlab='Standardized Residuals')
hist(model3$residuals,xlab='Standardized Residuals')
hist(rstudent(model3),xlab='Standardized Residuals')
qqline(y, col = 2, lwd = 1, lty = 2)
y = rstudent(model3)
qqnorm(y)
qqline(y, col = 2, lwd = 1, lty = 2)
y = rstudent(model3)
qqnorm(y)
qqline(y, col = 2, lwd = 1, lty = 2)
y = rstudent(model3)
shapiro.test(y)
acf(rstudent(model3), main = "ACF of standardized residuals")
plot(y=rstudent(model1),x=as.vector(time(rwalk)),
ylab='Standardized Residuals',xlab='Time',type='o',
main = "Time series plot of the standardized residuals")
plot(y=rstudent(model1),x=fitted(model1),
ylab='Standardized Residuals',xlab='Fitted Trend Line Values',
type='p', main = "Time series plot of the standardized residuals")
acf(rstudent(model1), main = "ACF of the standardized residuals")
data(larain)
y = larain
qqnorm(y)
qqline(y, col = 2, lwd = 1, lty = 2)
library(TSA)
n=100
sim.data1 = arima.sim(list(order = c(1,0,0), ar = 0.6), n = n)
acf(sim.data1)
pacf(sim.data1)
sim.data2 = arima.sim(list(order = c(1,0,0), ar = -0.6), n = n)
acf(sim.data2)
pacf(sim.data2)
sim.data3 = arima.sim(list(order = c(0,0,1), ma = 0.95), n = n)
acf(sim.data3)
acf(sim.data2)
sim.data4 = arima.sim(list(order = c(0,0,1), ma = -0.5), n = n)
acf(sim.data4)
sim.data8 = arima.sim(list(order = c(1,0,1), ar = -0.6, ma = -0.5), n = n)
acf(sim.data8)
sim.data8 = arima.sim(list(order = c(1,0,1), ar = -0.6, ma = -0.5), n = n)
acf(sim.data8)
sim.data5 = arima.sim(list(order = c(1,0,1), ar = 0.6, ma = 0.5), n = n)
acf(sim.data5)
prop.table(table(temperature_drop$RainToday)) * 100
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
weather <- read.csv('weatherAUS 2.csv')
weather$Date = as.Date(weather$Date,'%Y-%m-%d')
# Filter data for Melbourne
Melbourne = weather[weather$Location %in% c('Melbourne','MelbourneAirport'),]
# Add Month and Year-Month
Melbourne$Month = strftime(Melbourne$Date,"%b")
Melbourne$MonthYear = strftime(Melbourne$Date,"%b-%Y")
# Remove data where Tomorrow rain information is missing
table(Melbourne$RainTomorrow,useNA = 'ifany')
Melbourne = Melbourne %>% drop_na(RainTomorrow)
# Showing
str(Melbourne)
summarizeColumns(Melbourne) %>% knitr::kable( caption = 'Feature Summary before Data Preprocessing')
# ----------------------------------------------
# Temperature frop from 9AM to 3 PM for the same day
temperature_drop= Melbourne[Melbourne$Temp9am < Melbourne$Temp3pm, ]
prop.table(table(temperature_drop$RainToday)) * 100
# ------------------
# Monthly Average Rainfall from 2009-2016
total_yearmonth_rainfall = Melbourne %>%
select(MonthYear,Rainfall) %>%
group_by(MonthYear) %>%
summarise(monthTotal = sum(Rainfall, na.rm = TRUE))
total_yearmonth_rainfall$month = substr(total_yearmonth_rainfall$MonthYear, 1, 3)
monthly_rainfall =  total_yearmonth_rainfall %>%
group_by(month) %>%
summarise(avgRainfall = mean(monthTotal))
monthly_rainfall$month = factor(monthly_rainfall$month,
levels = c('Jan','Feb','Mar','Apr',
'May','Jun','Jul','Aug',
'Sep','Oct','Nov','Dec'),
ordered = TRUE)
ggplot(monthly_rainfall,aes(month,avgRainfall)) +
geom_bar(stat = 'identity',fill="#006699") +
ggtitle('Monthly Average Rainfall, 2009-2016') +
xlab('Months') +
ylab('Rainfall(MM)') +
labs(subtitle = 'Rainfall is increasing from Jan to Dec with little variation') +
theme(plot.subtitle = element_text(color = '#333333',face = "italic"))
library(knitr)
library(mlr)
library(tidyverse)
library(GGally)
library(cowplot)
require(corrplot)
library(reshape2)
theme_set(theme_minimal())
